{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","skill","setSkill","activity","setActivity","useEffect","randomizeInfo","activities","skills","getRandomArrayElement","array","console","log","Math","floor","random","length","setTimeout","newSkill","newActivity","className","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gPA6DeA,MA1Df,WAAgB,IAAD,EACaC,mBAAS,aADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,wBAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIbC,qBAAU,WACRC,MACA,IAEF,IAAMC,EAAa,CACjB,gCACA,gCACA,mCACA,4BACA,gCACA,2BACA,oCAGIC,EAAS,CACb,YACA,iBACA,iBACA,iBACA,aACA,gBAGIC,EAAwB,SAAAC,GAE5B,OADAC,QAAQC,IAAIF,GACLA,EAAMG,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,UAG1CV,EAAgB,SAAhBA,IAEJW,YAAW,WACT,IAAMC,EAAWT,EAAsBD,GACjCW,EAAcV,EAAsBF,GAC1CL,EAASgB,GACTd,EAAYe,GACZb,MACC,MAGL,OACE,oCACA,yBAAKc,UAAU,OACb,4BAAQA,UAAU,cAChB,gDACA,iCAAM,0BAAMC,MAAO,CAAEC,MAAO,YAAcrB,GAA1C,QAA4D,0BAAMoB,MAAO,CAAEC,MAAO,YAAcnB,KAElG,yBAAKiB,UAAU,QACb,wCC1CYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9755af8e.chunk.js","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [skill, setSkill] = useState('developer')\n  const [activity, setActivity] = useState('is glad you are here')\n\n  useEffect(() => {\n    randomizeInfo()\n  },[])\n\n  const activities = [\n    'loves to bike all over Philly',\n    'enjoys creative collaboration',\n    'thinks summer is the best season',\n    'plays a ton of boardgames',\n    'spends a ton of time climbing',\n    'has some awesome friends',\n    'is always learning something new'\n  ]\n\n  const skills = [\n    'developer',\n    'sound engineer',\n    'sound designer',\n    'video designer',\n    'game maker',\n    'collaborator'\n  ]\n\n  const getRandomArrayElement = array => {\n    console.log(array)\n    return array[Math.floor(Math.random() * array.length)]\n  }\n\n  const randomizeInfo = () => {\n    debugger\n    setTimeout(() => {\n      const newSkill = getRandomArrayElement(skills)\n      const newActivity = getRandomArrayElement(activities)\n      setSkill(newSkill)\n      setActivity(newActivity)\n      randomizeInfo()\n    }, 5000)\n  }\n\n  return (\n    <>\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>i'm zack mckenna</h1>\n        <h2>a <span style={{ color: '#5bc0de' }}>{skill}</span> who <span style={{ color: '#5cb85c' }}>{activity}</span></h2>\n      </header>\n      <div className='Info'>\n        <h4>Test</h4>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}